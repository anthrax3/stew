#!/usr/bin/env perl

use strict;
use warnings;

use File::Basename qw(basename);
use CPAN::FindDependencies;

my $details_file = '02packages.details.txt.gz';

my %seen;

foreach my $name (@ARGV) {
    gen_tree($name);
}

sub gen_tree {
    my ($name) = @_;

    if ($seen{$name}) {
        warn sprintf 'Skipping %s...', $name;
        return;
    }

    print "Working on '$name'...\n";

    my %modules;

    my @dependencies = CPAN::FindDependencies::finddeps(
        $name,
        '02packages' => $details_file,
        nowarnings   => 1
    );

    if (!@dependencies) {
        warn "Can't find module '$name'";
        return;
    }

    my %index;
    foreach my $dep (@dependencies) {
        $index{$dep->distribution} = $dep;
    }

    my $module = shift @dependencies;

    my %tree;
    $tree{$module->distribution} = [];
    calc_deps(\%tree, $module, \@dependencies, 1);

    foreach my $key (keys %tree) {
        my @deps = map { $index{$_} } @{$tree{$key} || []};
        gen_stew($index{$key}, @deps);
    }
}

sub dist_to_pkg {
    my ($dist) = @_;

    $dist =~ s/-([0-9\._a-z]+)(?:\.tar\.gz|\.tgz)$//;

    $dist =~ s{.*/}{};

    my @parts = map { s/_/-/g; $_ } split /::/, $dist;

    return 'lib' . join('-', map { lc } @parts) . '-perl';
}

sub gen_stew {
    my ($module, @deps) = @_;

    if ($seen{$module->name}) {
        warn sprintf 'Skipping %s...', $module->name;
        return;
    }

    $seen{$module->name}++;

    my $pkg       = dist_to_pkg($module->distribution);
    my ($version) = $module->distribution =~ m/-([0-9\._a-z]+)(?:\.tar\.gz|\.tgz)$/;

    if (!$version) {
        warn "Can't detect version from " . $module->distribution;
    }

    my $dist      = $module->distribution;
    my $deps = join ', ', map { "'$_'" } map { dist_to_pkg($_->name) } @deps;
    $deps = ', ' . $deps if $deps;

    my $file = basename($dist);
    my ($name) = $file =~ m/^(.*)(?:\.tar.gz|\.tgz)$/;

    my $stew_file = "${pkg}_${version}.stew";

    print "Generating $stew_file ...";

    open my $fh, '>', $stew_file or die $!;
    print $fh <<"EOF";
# Auto generated by cpan2stew

\$name    = "$pkg";
\$version = "$version";
\$package = "\$name-\$version";
\@depends = ('perl'$deps);
\$url     = "http://cpan.cpan.org/stacks/6.4/authors/id/$dist";
\$file    = "$file";

prepare {
    "tar xzf '\$file'"
};

build {
    "cd $name",
    "unset PERL5LIB PERL_MM_OPT PERL_MB_OPT PERL_LOCAL_LIB_ROOT",
    "export PERL_MM_USE_DEFAULT=1 MODULEBUILDRC=/dev/null PERL_AUTOINSTALL=--skipdeps",
    "export PERL5LIB=\$ENV{DESTDIR}/\$ENV{PREFIX}/lib/perl5/vendor_perl",
    (-f '$name/Build.PL' ? 'perl Build.PL' : 'perl Makefile.PL'),
    (-f '$name/Build.PL' ? './Build' : 'make')
};

install {
    "cd $name",
    "unset PERL5LIB PERL_MM_OPT PERL_MB_OPT PERL_LOCAL_LIB_ROOT",
    "export PERL5LIB=\$ENV{DESTDIR}/\$ENV{PREFIX}/lib/perl5/vendor_perl",
    (
        -f '$name/Build.PL'
        ? "./Build install --installdirs=vendor --destdir=\$ENV{DESTDIR}"
        : "make install INSTALLDIRS=vendor DESTDIR=\$ENV{DESTDIR}"
    )
};

cleanup {
    "cd \$ENV{DESTDIR}",
    "find . -name 'perllocal.pod' -exec rm -f {} \\\\;",
    "find . -name '.packlist' -exec rm -f {} \\\\;",
    "find . -type d -empty -delete",
};
EOF

    close $fh;

    print "ok\n";
}

sub calc_deps {
    my ($tree, $module, $dependencies, $depth) = @_;

    my $prev;
    while (my $dep = shift @$dependencies) {
        next if $dep->distribution =~ m/perl-.*?\.tar\.gz$/;

        $tree->{$dep->distribution} ||= [];

        if ($dep->depth < $depth) {
            unshift @$dependencies, $dep;
            return;
        }
        elsif ($dep->depth == $depth) {
            push @{$tree->{$module->distribution}}, $dep->distribution;
        }
        else {
            unshift @$dependencies, $dep;
            calc_deps($tree, $prev, $dependencies, $dep->depth);
        }

        $prev = $dep;
    }
}
