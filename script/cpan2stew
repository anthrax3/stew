#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;
use File::Basename qw(basename);
use CPAN::FindDependencies;
use File::Spec;
use HTTP::Tiny;
use Module::CPANfile;
use CPAN::DistnameInfo;

my $cpan = 'cpan.org';
my $repo;
my $local;
my $cpanfile;
my $stewfile;
GetOptions(
    "cpan=s"     => \$cpan,
    "repo=s"     => \$repo,
    "cpanfile=s" => \$cpanfile,
    "stewfile=s" => \$stewfile,
    "local"      => \$local
) or die("Error in command line arguments\n");

die '--cpan is required' unless $cpan;

$cpan = "http://$cpan" unless $cpan =~ m{^https?://};

my @packages = @ARGV;
if ($cpanfile) {
    my $file    = Module::CPANfile->load($cpanfile);
    my $prereqs = $file->prereqs->merged_requirements->as_string_hash;

    push @packages, keys %$prereqs;
}
die "Usage: [options] <package1> <package2>\n" unless @packages;

my $details_file_url = "$cpan/modules/02packages.details.txt.gz";
my $details_file     = basename $details_file_url;

my $ua = HTTP::Tiny->new;

print "Mirroring '$details_file_url' -> '$details_file'...\n";
my $response = $ua->mirror($details_file_url, $details_file);

die "Failed: $response->{reason}: $response->{content}\n"
  unless $response->{success};

my %seen;

foreach my $name (@packages) {
    gen_tree($name);
}

sub gen_tree {
    my ($name) = @_;

    if ($seen{$name}) {
        warn sprintf 'Skipping %s...', $name;
        return;
    }

    print "Working on '$name'...\n";

    my %modules;

    my @dependencies = CPAN::FindDependencies::finddeps(
        $name,
        '02packages' => $details_file,
        nowarnings   => 1
    );

    if (!@dependencies) {
        warn "Can't find module '$name'";
        return;
    }

    my %index;
    foreach my $dep (@dependencies) {
        $index{$dep->distribution} = $dep;
    }

    my $module = shift @dependencies;

    my %tree;
    $tree{$module->distribution} = [];
    calc_deps(\%tree, $module, \@dependencies, 1);

    if ($stewfile) {
        open my $fh, '>>', $stewfile or die "Can't open stewfile: $!\n";
        print $fh dist_to_pkg($module->distribution), "\n";
        close $fh;
    }

    foreach my $key (keys %tree) {
        my @deps = map { $index{$_} } @{$tree{$key} || []};
        gen_stew($index{$key}, @deps);
    }
}

sub dist_to_pkg {
    my ($dist) = @_;

    my $info = CPAN::DistnameInfo->new($dist);

    return {
        pkg     => 'lib' . lc($info->dist) . '-perl',
        name    => $info->distvname,
        file    => $info->filename,
        version => $info->version
    };
}

sub gen_stew {
    my ($module, @deps) = @_;

    if ($seen{$module->name}) {
        warn sprintf 'Skipping %s...', $module->name;
        return;
    }

    $seen{$module->name}++;

    my $info = dist_to_pkg($module->distribution);

    if (!$info->{version}) {
        warn "Can't detect version from " . $module->distribution;
    }

    my $pkg     = $info->{pkg};
    my $version = $info->{version};
    my $name    = $info->{name};
    my $file    = $info->{file};

    my $dist = $module->distribution;
    my $deps = join ', ',
      map { "'$_'" } map { dist_to_pkg($_->distribution)->{pkg} } @deps;
    $deps = ', ' . $deps if $deps;

    my $stew_file = "$info->{pkg}_$info->{version}.stew";

    if ($repo) {
        $stew_file = File::Spec->catfile($repo, 'stew', $stew_file);
    }

    print "Generating $stew_file ...\n";

    my $dist_url = "$cpan/authors/id/$dist";

    if ($local && $repo) {
        my $local_path = File::Spec->catfile($repo, 'src', basename($dist));
        print "Mirroring '$dist_url' -> '$local_path'\n";

        my $response = $ua->mirror($dist_url, $local_path);
        die "Failed: $response->{reason}: $response->{content}\n"
          unless $response->{success};
    }

    my $options = '';
    if (!$local) {
        $options = qq{\$url     = "$dist_url";};
    }

    open my $fh, '>', $stew_file or die $!;
    print $fh <<"EOF";
# Auto generated by cpan2stew

\$name    = "$pkg";
\$version = "$version";
\$package = "\$name-\$version";
\@depends = ('perl'$deps);
\$file    = "$file";
$options

prepare {
    "tar xzf '\$file'"
};

build {
    "cd $name",
    "unset PERL5LIB PERL_MM_OPT PERL_MB_OPT PERL_LOCAL_LIB_ROOT",
    "export PERL_MM_USE_DEFAULT=1 MODULEBUILDRC=/dev/null PERL_AUTOINSTALL=--skipdeps",
    "export PERL5LIB=\$ENV{DESTDIR}/\$ENV{PREFIX}/lib/perl5/vendor_perl",
    (-f '$name/Build.PL' ? 'perl Build.PL' : 'perl Makefile.PL'),
    (-f '$name/Build.PL' ? 'perl Build' : 'make')
};

install {
    "cd $name",
    "unset PERL5LIB PERL_MM_OPT PERL_MB_OPT PERL_LOCAL_LIB_ROOT",
    "export PERL5LIB=\$ENV{DESTDIR}/\$ENV{PREFIX}/lib/perl5/vendor_perl",
    (
        -f '$name/Build.PL'
        ? "perl Build install --installdirs=vendor --destdir=\$ENV{DESTDIR}"
        : "make install INSTALLDIRS=vendor DESTDIR=\$ENV{DESTDIR}"
    )
};

cleanup {
    "cd \$ENV{DESTDIR}",
    "find . -name 'perllocal.pod' -exec rm -f {} \\\\;",
    "find . -name '.packlist' -exec rm -f {} \\\\;",
    "find . -type d -empty -delete",
};
EOF

    close $fh;

    print "ok\n";
}

sub calc_deps {
    my ($tree, $module, $dependencies, $depth) = @_;

    my $prev;
    while (my $dep = shift @$dependencies) {
        next if $dep->distribution =~ m/perl-.*?\.tar\.(?:gz|bz2)$/;

        $tree->{$dep->distribution} ||= [];

        if ($dep->depth < $depth) {
            unshift @$dependencies, $dep;
            return;
        }
        elsif ($dep->depth == $depth) {
            push @{$tree->{$module->distribution}}, $dep->distribution;
        }
        else {
            unshift @$dependencies, $dep;
            calc_deps($tree, $prev, $dependencies, $dep->depth);
        }

        $prev = $dep;
    }
}
